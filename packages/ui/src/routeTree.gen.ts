/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BaseRouteRouteImport } from './routes/_base/route'
import { Route as BaseIndexRouteImport } from './routes/_base/index'
import { Route as BaseVaultRouteRouteImport } from './routes/_base/vault/route'
import { Route as BaseBalanceRouteRouteImport } from './routes/_base/balance/route'
import { Route as BaseVaultIndexRouteImport } from './routes/_base/vault/index'
import { Route as BaseEventIndexRouteImport } from './routes/_base/event/index'
import { Route as BaseBalanceIndexRouteImport } from './routes/_base/balance/index'
import { Route as BaseAdminIndexRouteImport } from './routes/_base/admin/index'
import { Route as BaseVaultMarketRouteImport } from './routes/_base/vault/market'
import { Route as BaseVaultAuditorRouteImport } from './routes/_base/vault/auditor'
import { Route as BaseBalanceVaultRouteImport } from './routes/_base/balance/vault'

const BaseRouteRoute = BaseRouteRouteImport.update({
  id: '/_base',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseIndexRoute = BaseIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BaseRouteRoute,
} as any)
const BaseVaultRouteRoute = BaseVaultRouteRouteImport.update({
  id: '/vault',
  path: '/vault',
  getParentRoute: () => BaseRouteRoute,
} as any)
const BaseBalanceRouteRoute = BaseBalanceRouteRouteImport.update({
  id: '/balance',
  path: '/balance',
  getParentRoute: () => BaseRouteRoute,
} as any)
const BaseVaultIndexRoute = BaseVaultIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BaseVaultRouteRoute,
} as any)
const BaseEventIndexRoute = BaseEventIndexRouteImport.update({
  id: '/event/',
  path: '/event/',
  getParentRoute: () => BaseRouteRoute,
} as any)
const BaseBalanceIndexRoute = BaseBalanceIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BaseBalanceRouteRoute,
} as any)
const BaseAdminIndexRoute = BaseAdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => BaseRouteRoute,
} as any)
const BaseVaultMarketRoute = BaseVaultMarketRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => BaseVaultRouteRoute,
} as any)
const BaseVaultAuditorRoute = BaseVaultAuditorRouteImport.update({
  id: '/auditor',
  path: '/auditor',
  getParentRoute: () => BaseVaultRouteRoute,
} as any)
const BaseBalanceVaultRoute = BaseBalanceVaultRouteImport.update({
  id: '/vault',
  path: '/vault',
  getParentRoute: () => BaseBalanceRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/balance': typeof BaseBalanceRouteRouteWithChildren
  '/vault': typeof BaseVaultRouteRouteWithChildren
  '/': typeof BaseIndexRoute
  '/balance/vault': typeof BaseBalanceVaultRoute
  '/vault/auditor': typeof BaseVaultAuditorRoute
  '/vault/market': typeof BaseVaultMarketRoute
  '/admin': typeof BaseAdminIndexRoute
  '/balance/': typeof BaseBalanceIndexRoute
  '/event': typeof BaseEventIndexRoute
  '/vault/': typeof BaseVaultIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof BaseIndexRoute
  '/balance/vault': typeof BaseBalanceVaultRoute
  '/vault/auditor': typeof BaseVaultAuditorRoute
  '/vault/market': typeof BaseVaultMarketRoute
  '/admin': typeof BaseAdminIndexRoute
  '/balance': typeof BaseBalanceIndexRoute
  '/event': typeof BaseEventIndexRoute
  '/vault': typeof BaseVaultIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_base': typeof BaseRouteRouteWithChildren
  '/_base/balance': typeof BaseBalanceRouteRouteWithChildren
  '/_base/vault': typeof BaseVaultRouteRouteWithChildren
  '/_base/': typeof BaseIndexRoute
  '/_base/balance/vault': typeof BaseBalanceVaultRoute
  '/_base/vault/auditor': typeof BaseVaultAuditorRoute
  '/_base/vault/market': typeof BaseVaultMarketRoute
  '/_base/admin/': typeof BaseAdminIndexRoute
  '/_base/balance/': typeof BaseBalanceIndexRoute
  '/_base/event/': typeof BaseEventIndexRoute
  '/_base/vault/': typeof BaseVaultIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/balance'
    | '/vault'
    | '/'
    | '/balance/vault'
    | '/vault/auditor'
    | '/vault/market'
    | '/admin'
    | '/balance/'
    | '/event'
    | '/vault/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/balance/vault'
    | '/vault/auditor'
    | '/vault/market'
    | '/admin'
    | '/balance'
    | '/event'
    | '/vault'
  id:
    | '__root__'
    | '/_base'
    | '/_base/balance'
    | '/_base/vault'
    | '/_base/'
    | '/_base/balance/vault'
    | '/_base/vault/auditor'
    | '/_base/vault/market'
    | '/_base/admin/'
    | '/_base/balance/'
    | '/_base/event/'
    | '/_base/vault/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BaseRouteRoute: typeof BaseRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_base': {
      id: '/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_base/': {
      id: '/_base/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof BaseIndexRouteImport
      parentRoute: typeof BaseRouteRoute
    }
    '/_base/vault': {
      id: '/_base/vault'
      path: '/vault'
      fullPath: '/vault'
      preLoaderRoute: typeof BaseVaultRouteRouteImport
      parentRoute: typeof BaseRouteRoute
    }
    '/_base/balance': {
      id: '/_base/balance'
      path: '/balance'
      fullPath: '/balance'
      preLoaderRoute: typeof BaseBalanceRouteRouteImport
      parentRoute: typeof BaseRouteRoute
    }
    '/_base/vault/': {
      id: '/_base/vault/'
      path: '/'
      fullPath: '/vault/'
      preLoaderRoute: typeof BaseVaultIndexRouteImport
      parentRoute: typeof BaseVaultRouteRoute
    }
    '/_base/event/': {
      id: '/_base/event/'
      path: '/event'
      fullPath: '/event'
      preLoaderRoute: typeof BaseEventIndexRouteImport
      parentRoute: typeof BaseRouteRoute
    }
    '/_base/balance/': {
      id: '/_base/balance/'
      path: '/'
      fullPath: '/balance/'
      preLoaderRoute: typeof BaseBalanceIndexRouteImport
      parentRoute: typeof BaseBalanceRouteRoute
    }
    '/_base/admin/': {
      id: '/_base/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof BaseAdminIndexRouteImport
      parentRoute: typeof BaseRouteRoute
    }
    '/_base/vault/market': {
      id: '/_base/vault/market'
      path: '/market'
      fullPath: '/vault/market'
      preLoaderRoute: typeof BaseVaultMarketRouteImport
      parentRoute: typeof BaseVaultRouteRoute
    }
    '/_base/vault/auditor': {
      id: '/_base/vault/auditor'
      path: '/auditor'
      fullPath: '/vault/auditor'
      preLoaderRoute: typeof BaseVaultAuditorRouteImport
      parentRoute: typeof BaseVaultRouteRoute
    }
    '/_base/balance/vault': {
      id: '/_base/balance/vault'
      path: '/vault'
      fullPath: '/balance/vault'
      preLoaderRoute: typeof BaseBalanceVaultRouteImport
      parentRoute: typeof BaseBalanceRouteRoute
    }
  }
}

interface BaseBalanceRouteRouteChildren {
  BaseBalanceVaultRoute: typeof BaseBalanceVaultRoute
  BaseBalanceIndexRoute: typeof BaseBalanceIndexRoute
}

const BaseBalanceRouteRouteChildren: BaseBalanceRouteRouteChildren = {
  BaseBalanceVaultRoute: BaseBalanceVaultRoute,
  BaseBalanceIndexRoute: BaseBalanceIndexRoute,
}

const BaseBalanceRouteRouteWithChildren =
  BaseBalanceRouteRoute._addFileChildren(BaseBalanceRouteRouteChildren)

interface BaseVaultRouteRouteChildren {
  BaseVaultAuditorRoute: typeof BaseVaultAuditorRoute
  BaseVaultMarketRoute: typeof BaseVaultMarketRoute
  BaseVaultIndexRoute: typeof BaseVaultIndexRoute
}

const BaseVaultRouteRouteChildren: BaseVaultRouteRouteChildren = {
  BaseVaultAuditorRoute: BaseVaultAuditorRoute,
  BaseVaultMarketRoute: BaseVaultMarketRoute,
  BaseVaultIndexRoute: BaseVaultIndexRoute,
}

const BaseVaultRouteRouteWithChildren = BaseVaultRouteRoute._addFileChildren(
  BaseVaultRouteRouteChildren,
)

interface BaseRouteRouteChildren {
  BaseBalanceRouteRoute: typeof BaseBalanceRouteRouteWithChildren
  BaseVaultRouteRoute: typeof BaseVaultRouteRouteWithChildren
  BaseIndexRoute: typeof BaseIndexRoute
  BaseAdminIndexRoute: typeof BaseAdminIndexRoute
  BaseEventIndexRoute: typeof BaseEventIndexRoute
}

const BaseRouteRouteChildren: BaseRouteRouteChildren = {
  BaseBalanceRouteRoute: BaseBalanceRouteRouteWithChildren,
  BaseVaultRouteRoute: BaseVaultRouteRouteWithChildren,
  BaseIndexRoute: BaseIndexRoute,
  BaseAdminIndexRoute: BaseAdminIndexRoute,
  BaseEventIndexRoute: BaseEventIndexRoute,
}

const BaseRouteRouteWithChildren = BaseRouteRoute._addFileChildren(
  BaseRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  BaseRouteRoute: BaseRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
